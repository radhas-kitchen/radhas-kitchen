/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from './google/protobuf/empty';
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace rkapi.auth {
	export enum UserKind {
		Provider = 0,
		Driver = 1,
		Consumer = 2,
	}
	export class Authorization extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(data?: any[] | {
			user_id?: string;
			token?: string;
		}) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('user_id' in data && data.user_id != undefined) {
					this.user_id = data.user_id;
				}
				if ('token' in data && data.token != undefined) {
					this.token = data.token;
				}
			}
		}

		get user_id() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}

		set user_id(value: string) {
			pb_1.Message.setField(this, 1, value);
		}

		get token() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}

		set token(value: string) {
			pb_1.Message.setField(this, 2, value);
		}

		static fromObject(data: {
			user_id?: string;
			token?: string;
		}): Authorization {
			const message = new Authorization({});
			if (data.user_id != null) {
				message.user_id = data.user_id;
			}
			if (data.token != null) {
				message.token = data.token;
			}
			return message;
		}

		toObject() {
			const data: {
				user_id?: string;
				token?: string;
			} = {};
			if (this.user_id != null) {
				data.user_id = this.user_id;
			}
			if (this.token != null) {
				data.token = this.token;
			}
			return data;
		}

		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.user_id.length) writer.writeString(1, this.user_id);
			if (this.token.length) writer.writeString(2, this.token);
			if (!w) return writer.getResultBuffer();
		}

		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Authorization {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Authorization();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.user_id = reader.readString();
						break;
					case 2:
						message.token = reader.readString();
						break;
					default: reader.skipField();
				}
			}
			return message;
		}

		serializeBinary(): Uint8Array {
			return this.serialize();
		}

		static deserializeBinary(bytes: Uint8Array): Authorization {
			return Authorization.deserialize(bytes);
		}
	}
	export class LoginRequest extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(data?: any[] | {
			email?: string;
			password?: string;
		}) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('email' in data && data.email != undefined) {
					this.email = data.email;
				}
				if ('password' in data && data.password != undefined) {
					this.password = data.password;
				}
			}
		}

		get email() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}

		set email(value: string) {
			pb_1.Message.setField(this, 1, value);
		}

		get password() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}

		set password(value: string) {
			pb_1.Message.setField(this, 2, value);
		}

		static fromObject(data: {
			email?: string;
			password?: string;
		}): LoginRequest {
			const message = new LoginRequest({});
			if (data.email != null) {
				message.email = data.email;
			}
			if (data.password != null) {
				message.password = data.password;
			}
			return message;
		}

		toObject() {
			const data: {
				email?: string;
				password?: string;
			} = {};
			if (this.email != null) {
				data.email = this.email;
			}
			if (this.password != null) {
				data.password = this.password;
			}
			return data;
		}

		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.email.length) writer.writeString(1, this.email);
			if (this.password.length) writer.writeString(2, this.password);
			if (!w) return writer.getResultBuffer();
		}

		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.email = reader.readString();
						break;
					case 2:
						message.password = reader.readString();
						break;
					default: reader.skipField();
				}
			}
			return message;
		}

		serializeBinary(): Uint8Array {
			return this.serialize();
		}

		static deserializeBinary(bytes: Uint8Array): LoginRequest {
			return LoginRequest.deserialize(bytes);
		}
	}
	export class LoginResponse extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(data?: any[] | {
			token?: string;
			expires?: string;
			user_id?: string;
			kind?: UserKind;
		}) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('token' in data && data.token != undefined) {
					this.token = data.token;
				}
				if ('expires' in data && data.expires != undefined) {
					this.expires = data.expires;
				}
				if ('user_id' in data && data.user_id != undefined) {
					this.user_id = data.user_id;
				}
				if ('kind' in data && data.kind != undefined) {
					this.kind = data.kind;
				}
			}
		}

		get token() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}

		set token(value: string) {
			pb_1.Message.setField(this, 1, value);
		}

		get expires() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}

		set expires(value: string) {
			pb_1.Message.setField(this, 2, value);
		}

		get user_id() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}

		set user_id(value: string) {
			pb_1.Message.setField(this, 3, value);
		}

		get kind() {
			return pb_1.Message.getFieldWithDefault(this, 4, UserKind.Provider) as UserKind;
		}

		set kind(value: UserKind) {
			pb_1.Message.setField(this, 4, value);
		}

		static fromObject(data: {
			token?: string;
			expires?: string;
			user_id?: string;
			kind?: UserKind;
		}): LoginResponse {
			const message = new LoginResponse({});
			if (data.token != null) {
				message.token = data.token;
			}
			if (data.expires != null) {
				message.expires = data.expires;
			}
			if (data.user_id != null) {
				message.user_id = data.user_id;
			}
			if (data.kind != null) {
				message.kind = data.kind;
			}
			return message;
		}

		toObject() {
			const data: {
				token?: string;
				expires?: string;
				user_id?: string;
				kind?: UserKind;
			} = {};
			if (this.token != null) {
				data.token = this.token;
			}
			if (this.expires != null) {
				data.expires = this.expires;
			}
			if (this.user_id != null) {
				data.user_id = this.user_id;
			}
			if (this.kind != null) {
				data.kind = this.kind;
			}
			return data;
		}

		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.token.length) writer.writeString(1, this.token);
			if (this.expires.length) writer.writeString(2, this.expires);
			if (this.user_id.length) writer.writeString(3, this.user_id);
			if (this.kind != UserKind.Provider) writer.writeEnum(4, this.kind);
			if (!w) return writer.getResultBuffer();
		}

		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.token = reader.readString();
						break;
					case 2:
						message.expires = reader.readString();
						break;
					case 3:
						message.user_id = reader.readString();
						break;
					case 4:
						message.kind = reader.readEnum();
						break;
					default: reader.skipField();
				}
			}
			return message;
		}

		serializeBinary(): Uint8Array {
			return this.serialize();
		}

		static deserializeBinary(bytes: Uint8Array): LoginResponse {
			return LoginResponse.deserialize(bytes);
		}
	}
	export class DataUserProvider extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(data?: any[] | {
			location?: string;
		}) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('location' in data && data.location != undefined) {
					this.location = data.location;
				}
			}
		}

		get location() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}

		set location(value: string) {
			pb_1.Message.setField(this, 1, value);
		}

		static fromObject(data: {
			location?: string;
		}): DataUserProvider {
			const message = new DataUserProvider({});
			if (data.location != null) {
				message.location = data.location;
			}
			return message;
		}

		toObject() {
			const data: {
				location?: string;
			} = {};
			if (this.location != null) {
				data.location = this.location;
			}
			return data;
		}

		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.location.length) writer.writeString(1, this.location);
			if (!w) return writer.getResultBuffer();
		}

		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataUserProvider {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataUserProvider();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.location = reader.readString();
						break;
					default: reader.skipField();
				}
			}
			return message;
		}

		serializeBinary(): Uint8Array {
			return this.serialize();
		}

		static deserializeBinary(bytes: Uint8Array): DataUserProvider {
			return DataUserProvider.deserialize(bytes);
		}
	}
	export class DataUserConsumer extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(data?: any[] | {
			location?: string;
		}) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('location' in data && data.location != undefined) {
					this.location = data.location;
				}
			}
		}

		get location() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}

		set location(value: string) {
			pb_1.Message.setField(this, 1, value);
		}

		static fromObject(data: {
			location?: string;
		}): DataUserConsumer {
			const message = new DataUserConsumer({});
			if (data.location != null) {
				message.location = data.location;
			}
			return message;
		}

		toObject() {
			const data: {
				location?: string;
			} = {};
			if (this.location != null) {
				data.location = this.location;
			}
			return data;
		}

		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.location.length) writer.writeString(1, this.location);
			if (!w) return writer.getResultBuffer();
		}

		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataUserConsumer {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataUserConsumer();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.location = reader.readString();
						break;
					default: reader.skipField();
				}
			}
			return message;
		}

		serializeBinary(): Uint8Array {
			return this.serialize();
		}

		static deserializeBinary(bytes: Uint8Array): DataUserConsumer {
			return DataUserConsumer.deserialize(bytes);
		}
	}
	export class CreateUserRequest extends pb_1.Message {
		#one_of_decls: number[][] = [[4, 6]];
		constructor(data?: any[] | ({
			email?: string;
			password?: string;
			name?: string;
		} & (({
			provider?: DataUserProvider;
			consumer?: never;
		} | {
			provider?: never;
			consumer?: DataUserConsumer;
		})))) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('email' in data && data.email != undefined) {
					this.email = data.email;
				}
				if ('password' in data && data.password != undefined) {
					this.password = data.password;
				}
				if ('name' in data && data.name != undefined) {
					this.name = data.name;
				}
				if ('provider' in data && data.provider != undefined) {
					this.provider = data.provider;
				}
				if ('consumer' in data && data.consumer != undefined) {
					this.consumer = data.consumer;
				}
			}
		}

		get email() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}

		set email(value: string) {
			pb_1.Message.setField(this, 1, value);
		}

		get password() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}

		set password(value: string) {
			pb_1.Message.setField(this, 2, value);
		}

		get name() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}

		set name(value: string) {
			pb_1.Message.setField(this, 3, value);
		}

		get provider() {
			return pb_1.Message.getWrapperField(this, DataUserProvider, 4) as DataUserProvider;
		}

		set provider(value: DataUserProvider) {
			pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
		}

		get has_provider() {
			return pb_1.Message.getField(this, 4) != null;
		}

		get consumer() {
			return pb_1.Message.getWrapperField(this, DataUserConsumer, 6) as DataUserConsumer;
		}

		set consumer(value: DataUserConsumer) {
			pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
		}

		get has_consumer() {
			return pb_1.Message.getField(this, 6) != null;
		}

		get kind() {
			const cases: Record<number, 'none' | 'provider' | 'consumer'> = {
				0: 'none',
				4: 'provider',
				6: 'consumer',
			};
			return cases[pb_1.Message.computeOneofCase(this, [4, 6])];
		}

		static fromObject(data: {
			email?: string;
			password?: string;
			name?: string;
			provider?: ReturnType<typeof DataUserProvider.prototype.toObject>;
			consumer?: ReturnType<typeof DataUserConsumer.prototype.toObject>;
		}): CreateUserRequest {
			const message = new CreateUserRequest({});
			if (data.email != null) {
				message.email = data.email;
			}
			if (data.password != null) {
				message.password = data.password;
			}
			if (data.name != null) {
				message.name = data.name;
			}
			if (data.provider != null) {
				message.provider = DataUserProvider.fromObject(data.provider);
			}
			if (data.consumer != null) {
				message.consumer = DataUserConsumer.fromObject(data.consumer);
			}
			return message;
		}

		toObject() {
			const data: {
				email?: string;
				password?: string;
				name?: string;
				provider?: ReturnType<typeof DataUserProvider.prototype.toObject>;
				consumer?: ReturnType<typeof DataUserConsumer.prototype.toObject>;
			} = {};
			if (this.email != null) {
				data.email = this.email;
			}
			if (this.password != null) {
				data.password = this.password;
			}
			if (this.name != null) {
				data.name = this.name;
			}
			if (this.provider != null) {
				data.provider = this.provider.toObject();
			}
			if (this.consumer != null) {
				data.consumer = this.consumer.toObject();
			}
			return data;
		}

		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.email.length) writer.writeString(1, this.email);
			if (this.password.length) writer.writeString(2, this.password);
			if (this.name.length) writer.writeString(3, this.name);
			if (this.has_provider) writer.writeMessage(4, this.provider, () => this.provider.serialize(writer));
			if (this.has_consumer) writer.writeMessage(6, this.consumer, () => this.consumer.serialize(writer));
			if (!w) return writer.getResultBuffer();
		}

		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.email = reader.readString();
						break;
					case 2:
						message.password = reader.readString();
						break;
					case 3:
						message.name = reader.readString();
						break;
					case 4:
						reader.readMessage(message.provider, () => message.provider = DataUserProvider.deserialize(reader));
						break;
					case 6:
						reader.readMessage(message.consumer, () => message.consumer = DataUserConsumer.deserialize(reader));
						break;
					default: reader.skipField();
				}
			}
			return message;
		}

		serializeBinary(): Uint8Array {
			return this.serialize();
		}

		static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
			return CreateUserRequest.deserialize(bytes);
		}
	}
	export class UpdatePasswordRequest extends pb_1.Message {
		#one_of_decls: number[][] = [];
		constructor(data?: any[] | {
			user_id?: string;
			old?: string;
			new?: string;
		}) {
			super();
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('user_id' in data && data.user_id != undefined) {
					this.user_id = data.user_id;
				}
				if ('old' in data && data.old != undefined) {
					this.old = data.old;
				}
				if ('new' in data && data.new != undefined) {
					this.new = data.new;
				}
			}
		}

		get user_id() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
		}

		set user_id(value: string) {
			pb_1.Message.setField(this, 1, value);
		}

		get old() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
		}

		set old(value: string) {
			pb_1.Message.setField(this, 2, value);
		}

		get new() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
		}

		set new(value: string) {
			pb_1.Message.setField(this, 3, value);
		}

		static fromObject(data: {
			user_id?: string;
			old?: string;
			new?: string;
		}): UpdatePasswordRequest {
			const message = new UpdatePasswordRequest({});
			if (data.user_id != null) {
				message.user_id = data.user_id;
			}
			if (data.old != null) {
				message.old = data.old;
			}
			if (data.new != null) {
				message.new = data.new;
			}
			return message;
		}

		toObject() {
			const data: {
				user_id?: string;
				old?: string;
				new?: string;
			} = {};
			if (this.user_id != null) {
				data.user_id = this.user_id;
			}
			if (this.old != null) {
				data.old = this.old;
			}
			if (this.new != null) {
				data.new = this.new;
			}
			return data;
		}

		serialize(): Uint8Array;
		serialize(w: pb_1.BinaryWriter): void;
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter();
			if (this.user_id.length) writer.writeString(1, this.user_id);
			if (this.old.length) writer.writeString(2, this.old);
			if (this.new.length) writer.writeString(3, this.new);
			if (!w) return writer.getResultBuffer();
		}

		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePasswordRequest {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePasswordRequest();
			while (reader.nextField()) {
				if (reader.isEndGroup()) break;
				switch (reader.getFieldNumber()) {
					case 1:
						message.user_id = reader.readString();
						break;
					case 2:
						message.old = reader.readString();
						break;
					case 3:
						message.new = reader.readString();
						break;
					default: reader.skipField();
				}
			}
			return message;
		}

		serializeBinary(): Uint8Array {
			return this.serialize();
		}

		static deserializeBinary(bytes: Uint8Array): UpdatePasswordRequest {
			return UpdatePasswordRequest.deserialize(bytes);
		}
	}
	interface GrpcUnaryServiceInterface<P, R> {
		(message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
		(message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
		(message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
		(message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
	}
	interface GrpcStreamServiceInterface<P, R> {
		(message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
		(message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
	}
	interface GrpWritableServiceInterface<P, R> {
		(metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
		(metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
		(options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
		(callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
	}
	interface GrpcChunkServiceInterface<P, R> {
		(metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
		(options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
	}
	interface GrpcPromiseServiceInterface<P, R> {
		(message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
		(message: P, options?: grpc_1.CallOptions): Promise<R>;
	}
	export abstract class UnimplementedAuthService {
		static definition = {
			Login: {
				path: '/rkapi.auth.Auth/Login',
				requestStream: false,
				responseStream: false,
				requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
				requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
				responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
				responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes)),
			},
			CreateUser: {
				path: '/rkapi.auth.Auth/CreateUser',
				requestStream: false,
				responseStream: false,
				requestSerialize: (message: CreateUserRequest) => Buffer.from(message.serialize()),
				requestDeserialize: (bytes: Buffer) => CreateUserRequest.deserialize(new Uint8Array(bytes)),
				responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
				responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
			},
			UpdatePassword: {
				path: '/rkapi.auth.Auth/UpdatePassword',
				requestStream: false,
				responseStream: false,
				requestSerialize: (message: UpdatePasswordRequest) => Buffer.from(message.serialize()),
				requestDeserialize: (bytes: Buffer) => UpdatePasswordRequest.deserialize(new Uint8Array(bytes)),
				responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
				responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
			},
		};

		[method: string]: grpc_1.UntypedHandleCall;
		abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
		abstract CreateUser(call: grpc_1.ServerUnaryCall<CreateUserRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
		abstract UpdatePassword(call: grpc_1.ServerUnaryCall<UpdatePasswordRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
	}
	export class AuthClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthService.definition, 'Auth', {}) {
		constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
			super(address, credentials, options);
		}

		Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
			return super.Login(message, metadata, options, callback);
		};

		CreateUser: GrpcUnaryServiceInterface<CreateUserRequest, dependency_1.google.protobuf.Empty> = (message: CreateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
			return super.CreateUser(message, metadata, options, callback);
		};

		UpdatePassword: GrpcUnaryServiceInterface<UpdatePasswordRequest, dependency_1.google.protobuf.Empty> = (message: UpdatePasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
			return super.UpdatePassword(message, metadata, options, callback);
		};
	}
}
