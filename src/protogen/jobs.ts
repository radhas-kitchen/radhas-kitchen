/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: jobs.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as dependency_2 from "./auth";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace rkapi.jobs {
    export enum JobStatus {
        Created = 0,
        Claimed = 1,
        PickedUp = 2,
        DroppedOff = 3,
        Cancelled = 4
    }
    export class Job extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4], [5], [6]];
        constructor(data?: any[] | ({
            id?: string;
            created?: string;
            status?: JobStatus;
        } & (({
            claimed?: string;
        }) | ({
            pickedup?: string;
        }) | ({
            droppedoff?: string;
        }) | ({
            cancelled?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("claimed" in data && data.claimed != undefined) {
                    this.claimed = data.claimed;
                }
                if ("pickedup" in data && data.pickedup != undefined) {
                    this.pickedup = data.pickedup;
                }
                if ("droppedoff" in data && data.droppedoff != undefined) {
                    this.droppedoff = data.droppedoff;
                }
                if ("cancelled" in data && data.cancelled != undefined) {
                    this.cancelled = data.cancelled;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set created(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get claimed() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set claimed(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_claimed() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get pickedup() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set pickedup(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_pickedup() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get droppedoff() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set droppedoff(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_droppedoff() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get cancelled() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set cancelled(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
        }
        get has_cancelled() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, JobStatus.Created) as JobStatus;
        }
        set status(value: JobStatus) {
            pb_1.Message.setField(this, 7, value);
        }
        get _claimed() {
            const cases: {
                [index: number]: "none" | "claimed";
            } = {
                0: "none",
                3: "claimed"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _pickedup() {
            const cases: {
                [index: number]: "none" | "pickedup";
            } = {
                0: "none",
                4: "pickedup"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _droppedoff() {
            const cases: {
                [index: number]: "none" | "droppedoff";
            } = {
                0: "none",
                5: "droppedoff"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _cancelled() {
            const cases: {
                [index: number]: "none" | "cancelled";
            } = {
                0: "none",
                6: "cancelled"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            id?: string;
            created?: string;
            claimed?: string;
            pickedup?: string;
            droppedoff?: string;
            cancelled?: string;
            status?: JobStatus;
        }): Job {
            const message = new Job({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.claimed != null) {
                message.claimed = data.claimed;
            }
            if (data.pickedup != null) {
                message.pickedup = data.pickedup;
            }
            if (data.droppedoff != null) {
                message.droppedoff = data.droppedoff;
            }
            if (data.cancelled != null) {
                message.cancelled = data.cancelled;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                created?: string;
                claimed?: string;
                pickedup?: string;
                droppedoff?: string;
                cancelled?: string;
                status?: JobStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.claimed != null) {
                data.claimed = this.claimed;
            }
            if (this.pickedup != null) {
                data.pickedup = this.pickedup;
            }
            if (this.droppedoff != null) {
                data.droppedoff = this.droppedoff;
            }
            if (this.cancelled != null) {
                data.cancelled = this.cancelled;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.created.length)
                writer.writeString(2, this.created);
            if (this.has_claimed)
                writer.writeString(3, this.claimed);
            if (this.has_pickedup)
                writer.writeString(4, this.pickedup);
            if (this.has_droppedoff)
                writer.writeString(5, this.droppedoff);
            if (this.has_cancelled)
                writer.writeString(6, this.cancelled);
            if (this.status != JobStatus.Created)
                writer.writeEnum(7, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Job {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Job();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.created = reader.readString();
                        break;
                    case 3:
                        message.claimed = reader.readString();
                        break;
                    case 4:
                        message.pickedup = reader.readString();
                        break;
                    case 5:
                        message.droppedoff = reader.readString();
                        break;
                    case 6:
                        message.cancelled = reader.readString();
                        break;
                    case 7:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Job {
            return Job.deserialize(bytes);
        }
    }
    export class JobId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_id" in data && data.job_id != undefined) {
                    this.job_id = data.job_id;
                }
            }
        }
        get job_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            job_id?: string;
        }): JobId {
            const message = new JobId({});
            if (data.job_id != null) {
                message.job_id = data.job_id;
            }
            return message;
        }
        toObject() {
            const data: {
                job_id?: string;
            } = {};
            if (this.job_id != null) {
                data.job_id = this.job_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_id.length)
                writer.writeString(1, this.job_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JobId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JobId {
            return JobId.deserialize(bytes);
        }
    }
    export class JobUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_id?: string;
            auth?: dependency_2.rkapi.auth.Authorization;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_id" in data && data.job_id != undefined) {
                    this.job_id = data.job_id;
                }
                if ("auth" in data && data.auth != undefined) {
                    this.auth = data.auth;
                }
            }
        }
        get job_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get auth() {
            return pb_1.Message.getWrapperField(this, dependency_2.rkapi.auth.Authorization, 2) as dependency_2.rkapi.auth.Authorization;
        }
        set auth(value: dependency_2.rkapi.auth.Authorization) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_auth() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            job_id?: string;
            auth?: ReturnType<typeof dependency_2.rkapi.auth.Authorization.prototype.toObject>;
        }): JobUpdateRequest {
            const message = new JobUpdateRequest({});
            if (data.job_id != null) {
                message.job_id = data.job_id;
            }
            if (data.auth != null) {
                message.auth = dependency_2.rkapi.auth.Authorization.fromObject(data.auth);
            }
            return message;
        }
        toObject() {
            const data: {
                job_id?: string;
                auth?: ReturnType<typeof dependency_2.rkapi.auth.Authorization.prototype.toObject>;
            } = {};
            if (this.job_id != null) {
                data.job_id = this.job_id;
            }
            if (this.auth != null) {
                data.auth = this.auth.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_id.length)
                writer.writeString(1, this.job_id);
            if (this.has_auth)
                writer.writeMessage(2, this.auth, () => this.auth.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JobUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.auth, () => message.auth = dependency_2.rkapi.auth.Authorization.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JobUpdateRequest {
            return JobUpdateRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedJobsService {
        static definition = {
            Post: {
                path: "/rkapi.jobs.Jobs/Post",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.rkapi.auth.Authorization) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.rkapi.auth.Authorization.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Claim: {
                path: "/rkapi.jobs.Jobs/Claim",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JobUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JobUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Unclaim: {
                path: "/rkapi.jobs.Jobs/Unclaim",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JobUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JobUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Pickup: {
                path: "/rkapi.jobs.Jobs/Pickup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JobUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JobUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Dropoff: {
                path: "/rkapi.jobs.Jobs/Dropoff",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JobUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JobUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Cancel: {
                path: "/rkapi.jobs.Jobs/Cancel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JobUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JobUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Jobs: {
                path: "/rkapi.jobs.Jobs/Jobs",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Job) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Job.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/rkapi.jobs.Jobs/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JobId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JobId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Job) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Job.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Post(call: grpc_1.ServerUnaryCall<dependency_2.rkapi.auth.Authorization, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Claim(call: grpc_1.ServerUnaryCall<JobUpdateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Unclaim(call: grpc_1.ServerUnaryCall<JobUpdateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Pickup(call: grpc_1.ServerUnaryCall<JobUpdateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Dropoff(call: grpc_1.ServerUnaryCall<JobUpdateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Cancel(call: grpc_1.ServerUnaryCall<JobUpdateRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract Jobs(call: grpc_1.ServerWritableStream<dependency_1.google.protobuf.Empty, Job>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<JobId, Job>, callback: grpc_1.sendUnaryData<Job>): void;
    }
    export class JobsClient extends grpc_1.makeGenericClientConstructor(UnimplementedJobsService.definition, "Jobs", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Post: GrpcUnaryServiceInterface<dependency_2.rkapi.auth.Authorization, dependency_1.google.protobuf.Empty> = (message: dependency_2.rkapi.auth.Authorization, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Post(message, metadata, options, callback);
        };
        Claim: GrpcUnaryServiceInterface<JobUpdateRequest, dependency_1.google.protobuf.Empty> = (message: JobUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Claim(message, metadata, options, callback);
        };
        Unclaim: GrpcUnaryServiceInterface<JobUpdateRequest, dependency_1.google.protobuf.Empty> = (message: JobUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Unclaim(message, metadata, options, callback);
        };
        Pickup: GrpcUnaryServiceInterface<JobUpdateRequest, dependency_1.google.protobuf.Empty> = (message: JobUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Pickup(message, metadata, options, callback);
        };
        Dropoff: GrpcUnaryServiceInterface<JobUpdateRequest, dependency_1.google.protobuf.Empty> = (message: JobUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Dropoff(message, metadata, options, callback);
        };
        Cancel: GrpcUnaryServiceInterface<JobUpdateRequest, dependency_1.google.protobuf.Empty> = (message: JobUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Cancel(message, metadata, options, callback);
        };
        Jobs: GrpcStreamServiceInterface<dependency_1.google.protobuf.Empty, Job> = (message: dependency_1.google.protobuf.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Job> => {
            return super.Jobs(message, metadata, options);
        };
        Get: GrpcUnaryServiceInterface<JobId, Job> = (message: JobId, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Job>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Job>, callback?: grpc_1.requestCallback<Job>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
    }
}
